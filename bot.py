import logging
import asyncio
from datetime import datetime, timedelta
import re
from typing import Dict, List, Optional, Tuple, Union, Any

from telegram import Update, InputMediaPhoto
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from sqlalchemy.ext.asyncio import AsyncSession

import config
import tmdb_api
import keyboards
import utils
from database import (
    init_db, get_db, get_or_create_user, subscribe_to_series, 
    unsubscribe_from_series, get_user_subscriptions,
    create_notification, get_unsent_notifications, mark_notification_as_sent
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
(
    MAIN_MENU,
    SEARCH_QUERY,
) = range(2)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data_cache = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è/–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async for session in get_db():
        await get_or_create_user(
            session, 
            user.id, 
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"–Ø –±–æ—Ç MovieTracker, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤–∏–Ω–∫–∏ –∫–∏–Ω–æ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤.\n\n"
        f"–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å:\n"
        f"‚Ä¢ –£–∑–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –Ω–æ–≤–∏–Ω–∫–∞—Ö üî•\n"
        f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—é–±–∏–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤ üì∫\n"
        f"‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ ‚è∞\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëá",
        reply_markup=keyboards.get_main_menu_keyboard()
    )
    
    return MAIN_MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º MovieTracker*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/trending - –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –Ω–æ–≤–∏–Ω–∫–∏\n"
        "/search - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤\n"
        "/subscriptions - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Å–µ—Ä–∏–∞–ª—ã\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
        "*–ù–∞–≤–∏–≥–∞—Ü–∏—è:*\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n\n"
        "*–ü–æ–¥–ø–∏—Å–∫–∏:*\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–∞—Ö –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤.\n\n"
        "*–ü–æ–∏—Å–∫:*\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.",
        parse_mode="Markdown"
    )

async def trending_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /trending"""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ç—Ä–µ–Ω–¥—ã:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üé¨ –§–∏–ª—å–º—ã", callback_data="trending_movie_menu")],
            [InlineKeyboardButton("üì∫ –°–µ—Ä–∏–∞–ª—ã", callback_data="trending_tv_menu")]
        ])
    )

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    await update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    return SEARCH_QUERY

async def subscriptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscriptions - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    async for session in get_db():
        subscriptions = await get_user_subscriptions(session, user_id)
    
    if not subscriptions:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ—Ä–∏–∞–ª—ã. –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Å–µ—Ä–∏–∞–ª —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫.",
            reply_markup=keyboards.get_subscriptions_keyboard([])
        )
    else:
        await update.message.reply_text(
            "üì∫ *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–∏–∞–ª—ã:*",
            parse_mode="Markdown",
            reply_markup=keyboards.get_subscriptions_keyboard(subscriptions)
        )

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    async for session in get_db():
        from sqlalchemy import select
        from database import User
        
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()
        
        if user:
            notifications_enabled = user.notifications_enabled
        else:
            notifications_enabled = True
    
    await update.message.reply_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞:",
        parse_mode="Markdown",
        reply_markup=keyboards.get_settings_keyboard(notifications_enabled)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üî• –ù–æ–≤–∏–Ω–∫–∏ —Ñ–∏–ª—å–º–æ–≤":
        await show_trending_movies(update, context)
        return MAIN_MENU
    
    elif text == "üì∫ –ù–æ–≤–∏–Ω–∫–∏ —Å–µ—Ä–∏–∞–ª–æ–≤":
        await show_trending_tv(update, context)
        return MAIN_MENU
    
    elif text == "üîç –ü–æ–∏—Å–∫":
        await update.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
        return SEARCH_QUERY
    
    elif text == "üë§ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
        await subscriptions_command(update, context)
        return MAIN_MENU
    
    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await update.message.reply_text(
            "ü§ñ *–û –±–æ—Ç–µ MovieTracker*\n\n"
            "MovieTracker - —ç—Ç–æ Telegram –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–∏–Ω–æ–∫ –∫–∏–Ω–æ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤.\n\n"
            "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –Ω–æ–≤–∏–Ω–æ–∫ üî•\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ üîç\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–æ–≤ üì∫\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–∞—Ö ‚è∞\n\n"
            "–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è API TMDB (The Movie Database).\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            parse_mode="Markdown"
        )
        return MAIN_MENU
    
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings_command(update, context)
        return MAIN_MENU
    
    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    else:
        return await process_search_query(update, context)

async def process_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    query = update.message.text.strip()
    
    if not query:
        await update.message.reply_text(
            "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞."
        )
        return SEARCH_QUERY
    
    await update.message.reply_text(f"üîç –ò—â—É '{query}'...")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API TMDB
    search_results = tmdb_api.search_multi(query)
    
    if not search_results or not search_results.get("results"):
        await update.message.reply_text(
            "üòî –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
        )
        return SEARCH_QUERY
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã
    results = [item for item in search_results.get("results", []) 
              if item.get("media_type") in ["movie", "tv"]]
    
    if not results:
        await update.message.reply_text(
            "üòî –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
        )
        return SEARCH_QUERY
    
    # C–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    if user_id not in user_data_cache:
        user_data_cache[user_id] = {}
    
    user_data_cache[user_id]["search_results"] = results
    user_data_cache[user_id]["search_query"] = query
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    page_results = results[:5]
    total_pages = (len(results) + 4) // 5  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
    
    await show_search_results(update, context, page_results, 1, total_pages)
    
    return MAIN_MENU

async def show_search_results(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                             results: List[Dict], page: int, total_pages: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
    if not results:
        if update.callback_query:
            await update.callback_query.message.edit_text(
                "üòî –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            )
        else:
            await update.message.reply_text(
                "üòî –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            )
        return
    
    message_text = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n"
    
    for i, item in enumerate(results, 1):
        message_text += f"{i}. {utils.format_search_result(item)}\n"
    
    message_text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"
    
    if update.callback_query:
        await update.callback_query.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboards.get_search_results_keyboard(results, page, total_pages)
        )
    else:
        await update.message.reply_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboards.get_search_results_keyboard(results, page, total_pages)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤
async def show_trending_movies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã"""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤:",
        reply_markup=keyboards.get_trending_period_keyboard("movie")
    )

async def show_trending_tv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–µ—Ä–∏–∞–ª—ã"""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:",
        reply_markup=keyboards.get_trending_period_keyboard("tv")
    )

async def handle_trending_content(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                content_type: str, time_window: str, page: int = 1) -> None:
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    query = update.callback_query
    
    if content_type == "movie":
        trending_data = tmdb_api.get_trending_movies(time_window, page)
        content_name = "—Ñ–∏–ª—å–º–æ–≤"
    else:  # tv
        trending_data = tmdb_api.get_trending_tv(time_window, page)
        content_name = "—Å–µ—Ä–∏–∞–ª–æ–≤"
    
    period_name = "—Å–µ–≥–æ–¥–Ω—è" if time_window == "day" else "–∑–∞ –Ω–µ–¥–µ–ª—é"
    
    results = trending_data.get("results", [])
    total_pages = trending_data.get("total_pages", 1)
    
    if not results:
        await query.message.edit_text(
            f"üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö {content_name} {period_name}."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    message_text = f"üî• *–¢—Ä–µ–Ω–¥–æ–≤—ã–µ {content_name} {period_name}:*\n\n"
    
    for i, item in enumerate(results[:10], 1):
        message_text += f"{i}. {utils.format_trending_item(item)}\n"
    
    message_text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    user_id = update.effective_user.id
    if user_id not in user_data_cache:
        user_data_cache[user_id] = {}
    
    user_data_cache[user_id]["trending_type"] = content_type
    user_data_cache[user_id]["trending_window"] = time_window
    user_data_cache[user_id]["trending_results"] = results
    
    callback_prefix = f"trending_{content_type}_{time_window}"
    
    await query.message.edit_text(
        message_text,
        parse_mode="Markdown",
        reply_markup=keyboards.get_pagination_keyboard(page, total_pages, callback_prefix)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ/—Å–µ—Ä–∏–∞–ª–µ
async def show_movie_details(update: Update, context: ContextTypes.DEFAULT_TYPE, movie_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å–º–∞
    movie_details = tmdb_api.get_movie_details(movie_id)
    
    if not movie_details or not movie_details.get("id"):
        await query.message.edit_text(
            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = utils.format_movie_info(movie_details)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –ø–æ—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    poster_path = movie_details.get("poster_path")
    
    if poster_path:
        poster_url = tmdb_api.get_poster_url(poster_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–µ—Ä–æ–º
        await query.message.delete()
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=poster_url,
            caption=message_text,
            parse_mode="Markdown",
            reply_markup=keyboards.get_movie_details_keyboard(movie_id)
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ—Å—Ç–µ—Ä–∞
        await query.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboards.get_movie_details_keyboard(movie_id)
        )

async def show_tv_details(update: Update, context: ContextTypes.DEFAULT_TYPE, tv_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–∏–∞–ª
    is_subscribed = False
    
    async for session in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscriptions = await get_user_subscriptions(session, user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Ä–∏–∞–ª –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
        is_subscribed = any(s.series_id == tv_id for s in subscriptions)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–µ—Ä–∏–∞–ª–∞
    tv_details = tmdb_api.get_tv_details(tv_id)
    
    if not tv_details or not tv_details.get("id"):
        await query.message.edit_text(
            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–æ–≤
    last_episode_date, next_episode_date = tmdb_api.get_latest_episodes(tv_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = utils.format_tv_info(tv_details, last_episode_date, next_episode_date)
    
    # –ü–æ–ª—É—á–∞–µ–º URL –ø–æ—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    poster_path = tv_details.get("poster_path")
    
    if poster_path:
        poster_url = tmdb_api.get_poster_url(poster_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–µ—Ä–æ–º
        await query.message.delete()
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=poster_url,
            caption=message_text,
            parse_mode="Markdown",
            reply_markup=keyboards.get_tv_details_keyboard(tv_id, is_subscribed)
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ—Å—Ç–µ—Ä–∞
        await query.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboards.get_tv_details_keyboard(tv_id, is_subscribed)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
async def subscribe_to_tv_series(update: Update, context: ContextTypes.DEFAULT_TYPE, tv_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–∏–∞–ª"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ
    tv_details = tmdb_api.get_tv_details(tv_id)
    
    if not tv_details or not tv_details.get("id"):
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ")
        return
    
    series_title = tv_details.get("name", "")
    poster_path = tv_details.get("poster_path")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    async for session in get_db():
        success = await subscribe_to_series(
            session, user_id, tv_id, series_title, poster_path
        )
    
    if success:
        await query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∞!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = keyboards.get_tv_details_keyboard(tv_id, True)
        
        if query.message.photo:
            await query.message.edit_reply_markup(reply_markup=keyboard)
        else:
            await query.message.edit_reply_markup(reply_markup=keyboard)
    else:
        await query.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–∏–∞–ª")

async def unsubscribe_from_tv_series(update: Update, context: ContextTypes.DEFAULT_TYPE, tv_id: int) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–µ—Ä–∏–∞–ª–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    async for session in get_db():
        success = await unsubscribe_from_series(session, user_id, tv_id)
    
    if success:
        await query.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ—Ä–∏–∞–ª–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = keyboards.get_tv_details_keyboard(tv_id, False)
        
        if query.message.photo:
            await query.message.edit_reply_markup(reply_markup=keyboard)
        else:
            await query.message.edit_reply_markup(reply_markup=keyboard)
    else:
        await query.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–∏–∞–ª")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def toggle_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    async for session in get_db():
        from sqlalchemy import select
        from database import User
        
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()
        
        if user:
            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user.notifications_enabled = not user.notifications_enabled
            await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = keyboards.get_settings_keyboard(user.notifications_enabled)
            await query.message.edit_reply_markup(reply_markup=keyboard)
            
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if user.notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            await query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async def show_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE, content_type: str, content_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–æ–≤"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = tmdb_api.get_recommendations(content_type, content_id)
    
    if not recommendations or not recommendations.get("results"):
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        return
    
    results = recommendations.get("results", [])[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    content_name = "—Ñ–∏–ª—å–º–æ–≤" if content_type == "movie" else "—Å–µ—Ä–∏–∞–ª–æ–≤"
    message_text = f"üëç *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö {content_name}:*\n\n"
    
    for i, item in enumerate(results, 1):
        title = item.get("title") if content_type == "movie" else item.get("name")
        year = item.get("release_date", "")[:4] if content_type == "movie" else item.get("first_air_date", "")[:4]
        year = year if year else "N/A"
        rating = item.get("vote_average", 0)
        stars = min(5, round(rating / 2)) if rating else 0
        
        message_text += f"{i}. *{utils.escape_markdown(title)}* ({year}) {rating}/10 {'‚≠ê' * stars}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    keyboard = []
    for item in results:
        item_id = item.get("id")
        title = item.get("title") if content_type == "movie" else item.get("name")
        if item_id and title:
            keyboard.append([InlineKeyboardButton(
                f"{title}", 
                callback_data=f"view_{content_type}_{item_id}"
            )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
    keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    await query.message.edit_text(
        message_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ
    if user_id not in user_data_cache:
        user_data_cache[user_id] = {}
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    data = query.data
    
    # –õ–æ–≥–∏—Ä—É–µ–º callback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Callback query: {data} from user {user_id}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "main_menu":
        await query.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
    
    # –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ç—Ä–µ–Ω–¥–æ–≤
    elif data.startswith("trending_") and data.endswith("_menu"):
        content_type = data.split("_")[1]  # movie –∏–ª–∏ tv
        content_name = "—Ñ–∏–ª—å–º–æ–≤" if content_type == "movie" else "—Å–µ—Ä–∏–∞–ª–æ–≤"
        
        await query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö {content_name}:",
            reply_markup=keyboards.get_trending_period_keyboard(content_type)
        )
    
    # –ü–æ–∫–∞–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
    elif data.startswith("trending_") and (data.endswith("_day") or data.endswith("_week")):
        parts = data.split("_")
        content_type = parts[1]  # movie –∏–ª–∏ tv
        time_window = parts[2]  # day –∏–ª–∏ week
        
        await handle_trending_content(update, context, content_type, time_window)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤
    elif data.startswith("trending_") and "_" in data:
        parts = data.split("_")
        if len(parts) >= 4 and parts[3].isdigit():
            content_type = parts[1]  # movie –∏–ª–∏ tv
            time_window = parts[2]  # day –∏–ª–∏ week
            page = int(parts[3])
            
            await handle_trending_content(update, context, content_type, time_window, page)
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞
    elif data.startswith("view_"):
        parts = data.split("_")
        if len(parts) >= 3:
            content_type = parts[1]  # movie –∏–ª–∏ tv
            content_id = int(parts[2])
            
            if content_type == "movie":
                await show_movie_details(update, context, content_id)
            elif content_type == "tv":
                await show_tv_details(update, context, content_id)
    
    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–∏–∞–ª
    elif data.startswith("subscribe_"):
        tv_id = int(data.split("_")[1])
        await subscribe_to_tv_series(update, context, tv_id)
    
    # –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–µ—Ä–∏–∞–ª–∞
    elif data.startswith("unsubscribe_"):
        tv_id = int(data.split("_")[1])
        await unsubscribe_from_tv_series(update, context, tv_id)
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    elif data == "toggle_notifications":
        await toggle_notifications(update, context)
    
    # –ü–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    elif data.startswith("recommend_"):
        parts = data.split("_")
        if len(parts) >= 3:
            content_type = parts[1]  # movie –∏–ª–∏ tv
            content_id = int(parts[2])
            
            await show_recommendations(update, context, content_type, content_id)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    elif data.startswith("search_page_"):
        page = int(data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results = user_data_cache.get(user_id, {}).get("search_results", [])
        
        if results:
            total_pages = (len(results) + 4) // 5  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
            start_idx = (page - 1) * 5
            end_idx = start_idx + 5
            page_results = results[start_idx:end_idx]
            
            await show_search_results(update, context, page_results, page, total_pages)
    
    # –ù–æ–≤—ã–π –ø–æ–∏—Å–∫
    elif data == "new_search":
        await query.message.edit_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
        return SEARCH_QUERY
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    elif data == "back":
        # –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.get_main_menu_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ—Ä–∏–∞–ª–æ–≤
async def check_series_updates():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ—Ä–∏–∞–ª–æ–≤")
    
    async for session in get_db():
        from sqlalchemy import select
        from database import Series, User
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–∏–∞–ª—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        result = await session.execute(
            select(Series).where(Series.subscribers.any())
        )
        series_list = result.scalars().all()
        
        for series in series_list:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–ø–∏–∑–æ–¥–∞—Ö
            last_episode_date, next_episode_date = tmdb_api.get_latest_episodes(series.series_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if last_episode_date and (
                series.last_episode_date is None or 
                (isinstance(last_episode_date, datetime) and last_episode_date > series.last_episode_date)
            ):
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ
                series.last_episode_date = last_episode_date
                series.next_episode_date = next_episode_date
                series.last_check = datetime.now()
                await session.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å–µ—Ä–∏–∞–ª–∞
                result = await session.execute(
                    select(User).where(User.subscribed_series.any(Series.series_id == series.series_id))
                )
                subscribers = result.scalars().all()
                
                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                for user in subscribers:
                    if user.notifications_enabled:
                        message = f"üîî –í—ã—à–µ–ª –Ω–æ–≤—ã–π —ç–ø–∏–∑–æ–¥ —Å–µ—Ä–∏–∞–ª–∞ \"{series.title}\"!"
                        await create_notification(
                            session, user.user_id, series.series_id, "tv", message
                        )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏
                series.last_check = datetime.now()
                if next_episode_date:
                    series.next_episode_date = next_episode_date
                await session.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notifications(application: Application):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    async for session in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = await get_unsent_notifications(session)
        
        for notification in notifications:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                if notification.content_type == "tv":
                    content_details = tmdb_api.get_tv_details(notification.content_id)
                    title = content_details.get("name", "")
                    poster_path = content_details.get("poster_path")
                else:  # movie
                    content_details = tmdb_api.get_movie_details(notification.content_id)
                    title = content_details.get("title", "")
                    poster_path = content_details.get("poster_path")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = notification.message
                
                if title:
                    message_text += f"\n–ù–∞–∑–≤–∞–Ω–∏–µ: {title}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if poster_path:
                    poster_url = tmdb_api.get_poster_url(poster_path)
                    
                    # –° –ø–æ—Å—Ç–µ—Ä–æ–º
                    await application.bot.send_photo(
                        chat_id=notification.user_id,
                        photo=poster_url,
                        caption=message_text
                    )
                else:
                    # –ë–µ–∑ –ø–æ—Å—Ç–µ—Ä–∞
                    await application.bot.send_message(
                        chat_id=notification.user_id,
                        text=message_text
                    )
                
                # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                await mark_notification_as_sent(session, notification.id)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification.id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á
async def scheduled_tasks(application: Application):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ—Ä–∏–∞–ª–æ–≤
            await check_series_updates()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await send_notifications(application)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á: {e}")
            
        # –ñ–¥–µ–º NOTIFICATION_INTERVAL —á–∞—Å–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(config.NOTIFICATION_INTERVAL * 3600)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    application = Application.builder().token(config.TELEGRAM_TOKEN).build()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start_command),
            CommandHandler("search", search_command),
        ],
        states={
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message),
            ],
            SEARCH_QUERY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_search_query),
            ],
        },
        fallbacks=[CommandHandler("start", start_command)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("trending", trending_command))
    application.add_handler(CommandHandler("subscriptions", subscriptions_command))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    application.job_queue.run_once(
        lambda context: asyncio.create_task(scheduled_tasks(application)),
        when=1
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())