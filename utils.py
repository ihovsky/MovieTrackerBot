import re
import logging
from datetime import datetime
from typing import Optional, List, Dict, Any, Tuple
import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def format_date(date_str: Optional[str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        date_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
    """
    if not date_str:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        return date_obj.strftime("%d.%m.%Y")
    except ValueError:
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"

def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Markdown
    """
    if not text:
        return ""
        
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

def escape_html(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è HTML
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è HTML
    """
    if not text:
        return ""
    
    return html.escape(text)

def truncate_text(text: str, max_length: int = 200) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""
        
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."

def format_runtime(minutes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –º–∏–Ω—É—Ç –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
    
    Args:
        minutes: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    """
    if not minutes or minutes <= 0:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
    hours = minutes // 60
    remaining_minutes = minutes % 60
    
    if hours > 0:
        return f"{hours} —á {remaining_minutes} –º–∏–Ω"
    else:
        return f"{minutes} –º–∏–Ω"

def format_rating(rating: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–≤–µ–∑–¥–æ—á–µ–∫
    
    Args:
        rating: –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 0 –¥–æ 10
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
    """
    if not rating or rating < 0:
        return "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏"
        
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 0 –¥–æ 5 –∑–≤–µ–∑–¥
    stars = min(5, round(rating / 2))
    return f"{rating}/10 {'‚≠ê' * stars}"

def get_genres_string(genres: List[Dict[str, Any]]) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
    
    Args:
        genres: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∂–∞–Ω—Ä–∞–º–∏
        
    Returns:
        str: –°—Ç—Ä–æ–∫–∞ —Å –∂–∞–Ω—Ä–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    """
    if not genres:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
    return ", ".join(genre.get("name", "") for genre in genres)

def format_movie_info(movie: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        movie: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ
    """
    title = movie.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    original_title = movie.get("original_title", "")
    release_date = format_date(movie.get("release_date", ""))
    overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    genres = get_genres_string(movie.get("genres", []))
    rating = format_rating(movie.get("vote_average", 0))
    runtime = format_runtime(movie.get("runtime", 0))
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ
    message = f"üé¨ *{escape_markdown(title)}*"
    
    if original_title and original_title != title:
        message += f"\nüìù *–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:* {escape_markdown(original_title)}"
    
    message += f"\nüìÖ *–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:* {release_date}"
    message += f"\n‚è± *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {runtime}"
    message += f"\nüèÜ *–†–µ–π—Ç–∏–Ω–≥:* {rating}"
    message += f"\nüé≠ *–ñ–∞–Ω—Ä—ã:* {escape_markdown(genres)}"
    message += f"\n\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{escape_markdown(truncate_text(overview, 700))}"
    
    return message

def format_tv_info(tv: Dict[str, Any], last_episode_date=None, next_episode_date=None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∞–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        tv: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–∏–∞–ª–µ
        last_episode_date: –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞
        next_episode_date: –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–∏–∞–ª–µ
    """
    title = tv.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    original_title = tv.get("original_name", "")
    first_air_date = format_date(tv.get("first_air_date", ""))
    overview = tv.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    genres = get_genres_string(tv.get("genres", []))
    rating = format_rating(tv.get("vote_average", 0))
    seasons_count = tv.get("number_of_seasons", 0)
    episodes_count = tv.get("number_of_episodes", 0)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–∏–∞–ª–µ
    message = f"üì∫ *{escape_markdown(title)}*"
    
    if original_title and original_title != title:
        message += f"\nüìù *–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:* {escape_markdown(original_title)}"
    
    message += f"\nüìÖ *–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:* {first_air_date}"
    message += f"\nüî¢ *–°–µ–∑–æ–Ω–æ–≤:* {seasons_count}"
    message += f"\nüìä *–≠–ø–∏–∑–æ–¥–æ–≤:* {episodes_count}"
    message += f"\nüèÜ *–†–µ–π—Ç–∏–Ω–≥:* {rating}"
    message += f"\nüé≠ *–ñ–∞–Ω—Ä—ã:* {escape_markdown(genres)}"
    
    if last_episode_date:
        if isinstance(last_episode_date, datetime):
            formatted_date = last_episode_date.strftime("%d.%m.%Y")
        else:
            formatted_date = format_date(str(last_episode_date))
        message += f"\nüìÜ *–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ø–∏–∑–æ–¥:* {formatted_date}"
    
    if next_episode_date:
        if isinstance(next_episode_date, datetime):
            formatted_date = next_episode_date.strftime("%d.%m.%Y")
        else:
            formatted_date = format_date(str(next_episode_date))
        message += f"\n‚è∞ *–°–ª–µ–¥—É—é—â–∏–π —ç–ø–∏–∑–æ–¥:* {formatted_date}"
    
    message += f"\n\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{escape_markdown(truncate_text(overview, 700))}"
    
    return message

def format_search_result(item: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
    
    Args:
        item: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    media_type = item.get("media_type", "")
    
    if media_type == "movie":
        title = item.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        year = item.get("release_date", "")[:4] if item.get("release_date") else "N/A"
        return f"üé¨ {escape_markdown(title)} ({year})"
    
    elif media_type == "tv":
        title = item.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        year = item.get("first_air_date", "")[:4] if item.get("first_air_date") else "N/A"
        return f"üì∫ {escape_markdown(title)} ({year})"
    
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"

def format_trending_item(item: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        item: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–Ω–¥–æ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    media_type = item.get("media_type", "")
    
    if media_type == "movie" or "title" in item:
        title = item.get("title", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        year = item.get("release_date", "")[:4] if item.get("release_date") else "N/A"
        rating = item.get("vote_average", 0)
        stars = min(5, round(rating / 2)) if rating else 0
        
        return f"üé¨ *{escape_markdown(title)}* ({year}) {rating}/10 {'‚≠ê' * stars}"
    
    elif media_type == "tv" or "name" in item:
        title = item.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        year = item.get("first_air_date", "")[:4] if item.get("first_air_date") else "N/A"
        rating = item.get("vote_average", 0)
        stars = min(5, round(rating / 2)) if rating else 0
        
        return f"üì∫ *{escape_markdown(title)}* ({year}) {rating}/10 {'‚≠ê' * stars}"
    
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞"

def chunk_list(lst: List[Any], chunk_size: int) -> List[List[Any]]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–¥—Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    
    Args:
        lst: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫
        chunk_size: –†–∞–∑–º–µ—Ä –ø–æ–¥—Å–ø–∏—Å–∫–∞
        
    Returns:
        List[List[Any]]: –°–ø–∏—Å–æ–∫ –ø–æ–¥—Å–ø–∏—Å–∫–æ–≤
    """
    return [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]